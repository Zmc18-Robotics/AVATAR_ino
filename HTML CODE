<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESP32 IoT Control</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px; /* Diperlebar dari 800px */
            margin: 50px auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .control-group {
            margin: 20px 0;
            padding: 20px;
            background: #f5f5f5;
            border-radius: 10px;
        }
        .control-group h2 {
            font-size: 18px;
            color: #555;
            margin-bottom: 15px;
        }
        button {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            font-size: 16px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: bold;
        }
        .btn-primary {
            background: #667eea;
            color: white;
        }
        .btn-primary:hover {
            background: #5568d3;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102,126,234,0.4);
        }
        .btn-success {
            background: #48bb78;
            color: white;
        }
        .btn-success:hover {
            background: #38a169;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(72,187,120,0.4);
        }
        .btn-danger {
            background: #f56565;
            color: white;
        }
        .btn-danger:hover {
            background: #e53e3e;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(245,101,101,0.4);
        }
        .btn-info {
            background: #4299e1;
            color: white;
        }
        .btn-info:hover {
            background: #3182ce;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(66,153,225,0.4);
        }
        .btn-warning {
            background: #ed8936;
            color: white;
        }
        .btn-warning:hover {
            background: #dd6b20;
            transform: translateY(-2px);
        }
        .btn-purple {
            background: #9f7aea;
            color: white;
        }
        .btn-purple:hover {
            background: #805ad5;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(159,122,234,0.4);
        }
        .btn-cyan {
            background: #0891b2;
            color: white;
        }
        .btn-cyan:hover {
            background: #0e7490;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(8,145,178,0.4);
        }
        .status {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
        }
        .status-on {
            background: #c6f6d5;
            color: #22543d;
        }
        .status-off {
            background: #fed7d7;
            color: #742a2a;
        }
        .status-detected {
            background: #fef08a;
            color: #713f12;
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        .info {
            background: #bee3f8;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            color: #2c5282;
        }
        .angle-display {
            background: #e6fffa;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            margin: 10px 0;
            font-size: 18px;
            color: #234e52;
        }
        .speed-control {
            margin: 15px 0;
            padding: 15px;
            background: #fff3cd;
            border-radius: 8px;
        }
        .speed-control label {
            display: block;
            margin-bottom: 10px;
            color: #333;
            font-weight: bold;
            font-size: 16px;
        }
        .speed-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
        }
        .btn-speed {
            padding: 12px;
            font-size: 14px;
            background: #ffc107;
            color: #000;
            font-weight: bold;
        }
        .btn-speed:hover {
            background: #ffb300;
            transform: translateY(-2px);
        }
        .speed-value {
            text-align: center;
            margin: 10px 0;
            font-size: 16px;
            color: #333;
            font-weight: bold;
        }
        .display-info {
            background: #d1fae5;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            color: #065f46;
        }
        .test-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        .custom-text-container {
            background: #fef3c7;
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
        }
        .custom-text-preview {
            background: #fbbf24;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-size: 32px;
            font-weight: bold;
            color: #78350f;
            margin: 10px 0 20px 0;
            letter-spacing: 12px;
            font-family: monospace;
        }
        .char-controls {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin: 20px 0;
        }
        .char-control {
            background: white;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            border: 2px solid #d97706;
        }
        .char-control h3 {
            margin: 0 0 10px 0;
            color: #92400e;
            font-size: 14px;
        }
        .char-display {
            font-size: 36px;
            font-weight: bold;
            color: #78350f;
            margin: 10px 0;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: monospace;
        }
        .arrow-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        .btn-arrow {
            padding: 10px;
            font-size: 18px;
            background: #d97706;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s;
        }
        .btn-arrow:hover {
            background: #b45309;
            transform: scale(1.05);
        }
        .btn-arrow:active {
            transform: scale(0.95);
        }
        .custom-text-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }
        
        /* Pixel Editor Styles */
        .pixel-editor-container {
            background: #f0f9ff;
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
        }
        .pixel-canvas-wrapper {
            background: #1e293b;
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow-x: auto; /* Allow horizontal scroll jika perlu */
        }
        .pixel-canvas {
            display: inline-grid;
            grid-template-columns: repeat(32, 20px);
            grid-template-rows: repeat(8, 20px);
            gap: 2px;
            background: #0f172a;
            padding: 10px;
            border-radius: 8px;
            border: 3px solid #334155;
        }
        .pixel {
            width: 20px;
            height: 20px;
            background: #1e293b;
            border: 1px solid #334155;
            cursor: pointer;
            transition: all 0.1s;
            border-radius: 2px;
        }
        .pixel:hover {
            border-color: #06b6d4;
            transform: scale(1.1);
        }
        .pixel.active {
            background: #22d3ee;
            box-shadow: 0 0 10px #22d3ee;
            border-color: #06b6d4;
        }
        .pixel-info {
            background: #dbeafe;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            text-align: center;
            color: #1e40af;
            font-size: 14px;
        }
        .pixel-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }
        .btn-pixel {
            padding: 12px;
            font-size: 14px;
        }
        .pixel-status {
            background: #e0f2fe;
            padding: 12px;
            border-radius: 8px;
            text-align: center;
            margin: 10px 0;
            color: #075985;
            font-weight: bold;
        }
        .preset-buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 8px;
            margin: 15px 0;
        }
        .btn-preset {
            padding: 10px;
            font-size: 12px;
            background: #0891b2;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s;
        }
        .btn-preset:hover {
            background: #0e7490;
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎛️ ESP32 IoT Control</h1>
        
        <div class="info">
            <strong>Status Sistem:</strong> Online ✅<br>
            <small>MAX7219: 4 Modules (32x8 pixels) | PIN: CLK=25, DIN=26, CS=27</small>
        </div>

        <!-- PIXEL EDITOR SECTION -->
        <div class="control-group">
            <h2>🎨 Pixel Art Editor</h2>
            <div class="pixel-editor-container">
                <div class="pixel-status" id="pixelStatus">Editor: Ready</div>
                
                <div class="pixel-info">
                    <strong>32 x 8 Pixel Canvas (Rotated 90°)</strong><br>
                    Klik pixel untuk menggambar | Canvas lebih lebar dari display fisik
                </div>
                
                <div class="pixel-canvas-wrapper">
                    <div class="pixel-canvas" id="pixelCanvas">
                        <!-- Pixels will be generated by JavaScript -->
                    </div>
                </div>
                
                <div class="preset-buttons">
                    <button class="btn-preset" onclick="loadPreset('smile')">😊 Smile</button>
                    <button class="btn-preset" onclick="loadPreset('heart')">❤️ Heart</button>
                    <button class="btn-preset" onclick="loadPreset('arrow')">➡️ Arrow</button>
                    <button class="btn-preset" onclick="loadPreset('wave')">🌊 Wave</button>
                </div>
                
                <div class="pixel-buttons">
                    <button class="btn-success btn-pixel" onclick="showPixelArt()">📺 Tampilkan</button>
                    <button class="btn-warning btn-pixel" onclick="clearPixelArt()">⏹️ Stop</button>
                    <button class="btn-danger btn-pixel" onclick="resetPixelEditor()">🔄 Reset</button>
                </div>
                
                <div style="margin-top: 10px; font-size: 12px; color: #075985; text-align: center;">
                    Klik pixel untuk menggambar | Preset patterns tersedia di atas
                </div>
            </div>
        </div>

        <!-- RGB LED CONTROL SECTION -->
        <div class="control-group">
            <h2>💡 RGB LED Control</h2>
            
            <div id="rgbStatus" class="status status-off">RGB: OFF</div>
            
            <div style="background: #1e293b; padding: 20px; border-radius: 10px; margin: 15px 0;">
                <div id="rgbPreview" style="background: rgb(0,0,0); width: 100%; height: 80px; border-radius: 8px; border: 3px solid #334155; box-shadow: inset 0 0 30px rgba(255,255,255,0.1); transition: all 0.3s ease;"></div>
                <div style="text-align: center; color: #cbd5e1; margin-top: 10px; font-size: 14px;">
                    R: <span id="rgbRValue">0</span> | G: <span id="rgbGValue">0</span> | B: <span id="rgbBValue">0</span>
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin: 15px 0;">
                <button class="btn-success" onclick="rgbOn()">💡 ON (White)</button>
                <button class="btn-danger" onclick="rgbOff()">⚫ OFF</button>
            </div>
            
            <div style="margin: 15px 0; padding: 15px; background: #f0f9ff; border-radius: 8px;">
                <h3 style="margin: 0 0 10px 0; color: #0c4a6e; font-size: 16px;">🎨 Pilih Warna Preset</h3>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px;">
                    <button class="btn-danger" style="padding: 12px; font-size: 13px;" onclick="setColor(255,0,0)">🔴 Merah</button>
                    <button class="btn-success" style="padding: 12px; font-size: 13px;" onclick="setColor(0,255,0)">🟢 Hijau</button>
                    <button class="btn-info" style="padding: 12px; font-size: 13px;" onclick="setColor(0,0,255)">🔵 Biru</button>
                    <button class="btn-warning" style="padding: 12px; font-size: 13px;" onclick="setColor(255,255,0)">🟡 Kuning</button>
                    <button class="btn-cyan" style="padding: 12px; font-size: 13px;" onclick="setColor(0,255,255)">💠 Cyan</button>
                    <button class="btn-purple" style="padding: 12px; font-size: 13px;" onclick="setColor(255,0,255)">🟣 Magenta</button>
                    <button class="btn-primary" style="padding: 12px; font-size: 13px;" onclick="setColor(255,255,255)">⚪ Putih</button>
                    <button class="btn-warning" style="padding: 12px; font-size: 13px; background: #f97316;" onclick="setColor(255,128,0)">🟠 Orange</button>
                    <button class="btn-purple" style="padding: 12px; font-size: 13px; background: #7c3aed;" onclick="setColor(128,0,128)">💜 Ungu</button>
                </div>
            </div>
            
            <div style="margin: 15px 0; padding: 15px; background: #fef3c7; border-radius: 8px;">
                <h3 style="margin: 0 0 10px 0; color: #78350f; font-size: 16px;">✨ Mode Efek Animasi</h3>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                    <button class="btn-warning" onclick="rgbBlink()">⚡ Blink</button>
                    <button class="btn-purple" onclick="rgbRandom()">🎲 Random</button>
                    <button class="btn-info" onclick="rgbFade()">🌊 Fade</button>
                    <button class="btn-danger" onclick="rgbPolice()">🚨 Polisi</button>
                </div>
                <div style="margin-top: 10px; font-size: 12px; color: #78350f; text-align: center;">
                    Blink: Kedip normal | Random: Warna acak | Fade: Redup-terang | Polisi: Merah-biru
                </div>
            </div>
            
            <div id="rgbModeInfo" style="background: #dbeafe; padding: 12px; border-radius: 8px; text-align: center; color: #1e40af; font-weight: bold; margin-top: 10px;">
                Mode: OFF
            </div>
        </div>

        <!-- CUSTOM TEXT SECTION -->
        <div class="control-group">
            <h2>✏️ Custom Text Display</h2>
            <div class="custom-text-container">
                <div class="custom-text-preview" id="textPreview">- - - -</div>
                
                <div class="char-controls">
                    <div class="char-control">
                        <h3>Channel 1</h3>
                        <div class="char-display" id="char1">-</div>
                        <div class="arrow-buttons">
                            <button class="btn-arrow" onclick="changeChar(0, 1)">▲</button>
                            <button class="btn-arrow" onclick="changeChar(0, -1)">▼</button>
                        </div>
                    </div>
                    
                    <div class="char-control">
                        <h3>Channel 2</h3>
                        <div class="char-display" id="char2">-</div>
                        <div class="arrow-buttons">
                            <button class="btn-arrow" onclick="changeChar(1, 1)">▲</button>
                            <button class="btn-arrow" onclick="changeChar(1, -1)">▼</button>
                        </div>
                    </div>
                    
                    <div class="char-control">
                        <h3>Channel 3</h3>
                        <div class="char-display" id="char3">-</div>
                        <div class="arrow-buttons">
                            <button class="btn-arrow" onclick="changeChar(2, 1)">▲</button>
                            <button class="btn-arrow" onclick="changeChar(2, -1)">▼</button>
                        </div>
                    </div>
                    
                    <div class="char-control">
                        <h3>Channel 4</h3>
                        <div class="char-display" id="char4">-</div>
                        <div class="arrow-buttons">
                            <button class="btn-arrow" onclick="changeChar(3, 1)">▲</button>
                            <button class="btn-arrow" onclick="changeChar(3, -1)">▼</button>
                        </div>
                    </div>
                </div>
                
                <div class="custom-text-buttons">
                    <button class="btn-purple" onclick="showCustomText()">📺 Tampilkan</button>
                    <button class="btn-danger" onclick="stopCustomText()">⏹️ Stop</button>
                </div>
                <div style="margin-top: 10px; font-size: 12px; color: #92400e; text-align: center;">
                    Gunakan tombol ▲▼ untuk mengubah karakter
                </div>
            </div>
        </div>

        <!-- SERVO CONTROL SECTION -->
        <div class="control-group">
            <h2>🔄 Servo Control</h2>
            <div id="swingStatus" class="status status-off">Swing Mode: OFF</div>
            <div id="angleDisplay" class="angle-display">Angle: 0°</div>
            <button class="btn-success" onclick="toggleSwing()">Toggle Swing Mode</button>
            <button class="btn-primary" onclick="testServo()">Test Servo (90°)</button>
            
            <div class="speed-control">
                <label>⚡ Kecepatan Rotasi:</label>
                <div class="speed-value">Delay: <span id="currentSpeed">20</span> ms</div>
                <div class="speed-buttons">
                    <button class="btn-speed" onclick="setSpeed(5)">Sangat Cepat<br>5 ms</button>
                    <button class="btn-speed" onclick="setSpeed(15)">Cepat<br>15 ms</button>
                    <button class="btn-speed" onclick="setSpeed(20)">Normal<br>20 ms</button>
                    <button class="btn-speed" onclick="setSpeed(30)">Sedang<br>30 ms</button>
                    <button class="btn-speed" onclick="setSpeed(50)">Lambat<br>50 ms</button>
                    <button class="btn-speed" onclick="setSpeed(80)">Sangat Lambat<br>80 ms</button>
                </div>
            </div>
        </div>

        <!-- SENSOR & DISPLAY SECTION -->
        <div class="control-group">
            <h2>📊 Sensor & Display</h2>
            <div id="sensorInfo" class="info">Distance: -- cm</div>
            <div id="displayStatus" class="display-info">Display: Standby</div>
            <div class="test-buttons">
                <button class="btn-info" onclick="testDisplay()">Test "HALO"</button>
                <button class="btn-warning" onclick="testDisplay2()">Test "TEST"</button>
            </div>
            <button class="btn-info" onclick="clearDisplay()">Clear Display</button>
        </div>

        <!-- SYSTEM CONTROL SECTION -->
        <div class="control-group">
            <h2>🔧 System Control</h2>
            <button class="btn-danger" onclick="stopAll()">Stop All</button>
        </div>
    </div>

    <script>
        let currentChars = [' ', ' ', ' ', ' '];
        const charset = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let pixelData = [];
        let currentRgbR = 0, currentRgbG = 0, currentRgbB = 0;

        function rgbOn() {
            fetch('/rgb-on')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function rgbOff() {
            fetch('/rgb-off')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function setColor(r, g, b) {
            fetch('/rgb-color?r=' + r + '&g=' + g + '&b=' + b)
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function rgbBlink() {
            fetch('/rgb-blink')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function rgbRandom() {
            fetch('/rgb-random')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function rgbFade() {
            // Use current color or default to white
            let r = currentRgbR || 255;
            let g = currentRgbG || 255;
            let b = currentRgbB || 255;
            //By Zmc18_Robotics Zminecrafter @mc.zminecrafter_18 @Zmc18_Roboticz
            fetch('/rgb-fade?r=' + r + '&g=' + g + '&b=' + b)
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function rgbPolice() {
            fetch('/rgb-police')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function updateRgbDisplay(data) {
            // Update RGB status
            document.getElementById('rgbStatus').className = 
                'status ' + (data.rgbActive ? 'status-on' : 'status-off');
            document.getElementById('rgbStatus').textContent = 
                'RGB: ' + (data.rgbActive ? 'ON' : 'OFF');
            
            // Update RGB values
            currentRgbR = data.rgbR || 0;
            currentRgbG = data.rgbG || 0;
            currentRgbB = data.rgbB || 0;
            
            // Update preview box
            document.getElementById('rgbPreview').style.background = 
                'rgb(' + currentRgbR + ',' + currentRgbG + ',' + currentRgbB + ')';
            
            // Add glow effect if active
            if(data.rgbActive && (currentRgbR > 0 || currentRgbG > 0 || currentRgbB > 0)) {
                document.getElementById('rgbPreview').style.boxShadow = 
                    'inset 0 0 30px rgba(255,255,255,0.3), 0 0 20px rgba(' + 
                    currentRgbR + ',' + currentRgbG + ',' + currentRgbB + ',0.6)';
            } else {
                document.getElementById('rgbPreview').style.boxShadow = 
                    'inset 0 0 30px rgba(255,255,255,0.1)';
            }
            
            // Update RGB value display
            document.getElementById('rgbRValue').textContent = currentRgbR;
            document.getElementById('rgbGValue').textContent = currentRgbG;
            document.getElementById('rgbBValue').textContent = currentRgbB;
            
            // Update mode info
            let modeText = 'Mode: ';
            let modeNames = ['OFF', 'Static', 'Blink', 'Random', 'Fade', 'Police'];
            modeText += modeNames[data.rgbMode] || 'OFF';
            document.getElementById('rgbModeInfo').textContent = modeText;
        }

        // Initialize pixel canvas
        function initPixelCanvas() {
            const canvas = document.getElementById('pixelCanvas');
            canvas.innerHTML = '';
            
            // Create 8 rows x 32 columns grid (8 rows, 32 columns)
            for(let row = 0; row < 8; row++) {
                for(let col = 0; col < 32; col++) {
                    const pixel = document.createElement('div');
                    pixel.className = 'pixel';
                    pixel.dataset.col = col;
                    pixel.dataset.row = row;
                    pixel.onclick = function() {
                        togglePixel(col, row, this);
                    };
                    canvas.appendChild(pixel);
                }
            }
            
            // Initialize pixel data array
            pixelData = Array(32).fill(0).map(() => Array(8).fill(0));
        }

        function togglePixel(col, row, element) {
            fetch('/toggle-pixel?col=' + col + '&row=' + row)
                .then(response => response.text())
                .then(data => {
                    if(data === '1') {
                        element.classList.add('active');
                        pixelData[col][row] = 1;
                    } else {
                        element.classList.remove('active');
                        pixelData[col][row] = 0;
                    }
                })
                .catch(err => console.log('Error:', err));
        }

        function showPixelArt() {
            fetch('/show-pixel-art')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function clearPixelArt() {
            fetch('/clear-pixel-art')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function resetPixelEditor() {
            if(confirm('Reset semua pixel? Gambar akan terhapus.')) {
                fetch('/reset-pixel-editor')
                    .then(response => response.text())
                    .then(data => {
                        // Clear visual canvas
                        const pixels = document.querySelectorAll('.pixel');
                        pixels.forEach(p => p.classList.remove('active'));
                        
                        // Clear data array
                        pixelData = Array(32).fill(0).map(() => Array(8).fill(0));
                        
                        updateStatus();
                    })
                    .catch(err => console.log('Error:', err));
            }
        }

        function loadPreset(type) {
            // Clear first
            const pixels = document.querySelectorAll('.pixel');
            pixels.forEach(p => p.classList.remove('active'));
            
            let pattern = [];
            
            if(type === 'smile') {
                // Smiley face disesuaikan dengan rotasi
                pattern = [
                    [10,2], [10,5], [21,2], [21,5], // eyes
                    [8,1], [8,6], [9,0], [9,7], [22,0], [22,7], [23,1], [23,6], // outline
                    [12,0], [13,0], [14,0], [15,0], [16,0], [17,0], [18,0], [19,0] // smile
                ]; //By Zmc18_Robotics Zminecrafter @mc.zminecrafter_18 @Zmc18_Roboticz
            } else if(type === 'heart') {
                // Heart pattern
                pattern = [
                    [10,2], [10,3], [11,1], [11,2], [11,3], [11,4], [12,2], [12,3],
                    [20,2], [20,3], [21,1], [21,2], [21,3], [21,4], [22,2], [22,3],
                    [13,4], [14,5], [15,6], [16,7], [17,6], [18,5], [19,4]
                ];
            } else if(type === 'arrow') {
                // Arrow pointing right
                pattern = [
                    [12,3], [12,4], [13,3], [13,4], [14,3], [14,4], [15,3], [15,4],
                    [16,2], [16,3], [16,4], [16,5], [17,1], [17,2], [17,5], [17,6],
                    [18,0], [18,1], [18,6], [18,7]
                ];
            } else if(type === 'wave') {
                // Wave across all columns
                for(let col = 0; col < 32; col++) {
                    let row = Math.round(4 + 2 * Math.sin(col * Math.PI / 8));
                    pattern.push([col, row]);
                }
            }
            
            // Apply pattern
            pattern.forEach(([col, row]) => {
                if(col < 32 && row < 8) {
                    const pixelIndex = row * 32 + col;
                    togglePixel(col, row, pixels[pixelIndex]);
                }
            });
        }

        function changeChar(channel, direction) {
            fetch('/change-char?ch=' + channel + '&dir=' + direction)
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function updateCharDisplay(chars) {
            document.getElementById('char1').textContent = chars[0] || '-';
            document.getElementById('char2').textContent = chars[1] || '-';
            document.getElementById('char3').textContent = chars[2] || '-';
            document.getElementById('char4').textContent = chars[3] || '-';
            
            let preview = '';
            for(let i = 0; i < 4; i++) {
                preview += (chars[i] === ' ' ? '-' : chars[i]) + ' ';
            }
            document.getElementById('textPreview').textContent = preview.trim();
        }

        function showCustomText() {
            fetch('/show-custom-text')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function stopCustomText() {
            fetch('/stop-custom-text')
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function updateStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    // Servo status
                    document.getElementById('swingStatus').className = 
                        'status ' + (data.swing ? 'status-on' : 'status-off');
                    document.getElementById('swingStatus').textContent = 
                        'Swing Mode: ' + (data.swing ? 'ON' : 'OFF');
                    
                    document.getElementById('angleDisplay').textContent = 
                        'Angle: ' + data.angle + '°';
                    
                    // Sensor status
                    let distanceText = 'Distance: ';
                    if(data.distance > 0) {
                        distanceText += data.distance + ' cm';
                        if(data.distance >= 60 && data.distance <= 90) {
                            distanceText += ' 🎯 (Detection Zone)';
                        }
                    } else {
                        distanceText += 'No object';
                    }
                    document.getElementById('sensorInfo').textContent = distanceText;
                    
                    if(data.distance >= 60 && data.distance <= 90) {
                        document.getElementById('sensorInfo').className = 'status-detected';
                    } else {
                        document.getElementById('sensorInfo').className = 'info';
                    }
                    
                    // Display status
                    let displayText = 'Display: ';
                    if(data.pixelEditorActive) {
                        displayText += '🎨 Pixel Art';
                    } else if(data.customTextActive) {
                        displayText += '✏️ Custom Text';
                    } else if(data.displayActive) {
                        displayText += '🔴 Active';
                    } else {
                        displayText += '⚪ Standby';
                    }
                    document.getElementById('displayStatus').textContent = displayText;
                    
                    // Pixel status
                    let pixelStatusText = 'Editor: ';
                    if(data.pixelEditorActive) {
                        pixelStatusText += '🟢 Displaying on Device';
                    } else {
                        pixelStatusText += 'Ready';
                    }
                    document.getElementById('pixelStatus').textContent = pixelStatusText;
                    
                    // Speed
                    document.getElementById('currentSpeed').textContent = data.speed;
                    
                    // Custom text characters
                    if(data.chars) {
                        updateCharDisplay(data.chars);
                    }
                    
                    // Update pixel canvas from server data
                    if(data.pixels) {
                        const pixels = document.querySelectorAll('.pixel');
                        for(let col = 0; col < 32; col++) {
                            for(let row = 0; row < 8; row++) {
                                const pixelElement = pixels[row * 32 + col];
                                if(data.pixels[col][row] === 1) {
                                    pixelElement.classList.add('active');
                                } else {
                                    pixelElement.classList.remove('active');
                                }
                            }
                        }
                    }
                    
                    // RGB LED status update
                    updateRgbDisplay(data);
                })
                .catch(err => console.log('Error:', err));
        }

        function setSpeed(value) {
            fetch('/speed?val=' + value)
                .then(response => response.text())
                .then(data => {
                    updateStatus();
                })
                .catch(err => console.log('Error:', err));
        }

        function toggleSwing() {
            fetch('/toggle-swing').then(() => updateStatus());
        }

        function testServo() {
            fetch('/test-servo').then(() => updateStatus());
        }

        function testDisplay() {
            fetch('/test-display').then(() => updateStatus());
        }

        function testDisplay2() {
            fetch('/test-display2').then(() => updateStatus());
        }

        function clearDisplay() {
            fetch('/clear-display').then(() => updateStatus());
        }

        function stopAll() {
            fetch('/stop-all').then(() => updateStatus());
        }

        // Initialize on load
        window.onload = function() {
            initPixelCanvas();
            updateStatus();
            setInterval(updateStatus, 1000);
        };
    </script>
</body>
</html>
